<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blackqwerty</title>
  <subtitle>talk is cheap，let me show you the code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-09T17:08:02.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>guaju</name>
    <email>guaju@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DiskLruCache 完全解析</title>
    <link href="http://yoursite.com/2017/08/09/DiskLruCache/"/>
    <id>http://yoursite.com/2017/08/09/DiskLruCache/</id>
    <published>2017-08-09T04:15:07.000Z</published>
    <updated>2017-08-09T17:08:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oucijhbtq.bkt.clouddn.com/bb.png?imageMogr2/auto-orient/thumbnail/884x/blur/1x0/quality/75|imageslim" alt="BLACKBERRY" title="BLACKBERRY"></p>
<p>重新看了下郭霖的disklrucache,现在在这里做下记录</p>
<p>disklrucache 是J神为解决实际开发项目中的本地缓存问题而贡献的一个小框架，整个小框架仅仅有三个类：</p>
<blockquote>
<p>DiskLruCache.java<br>StrictLineReader.java<br>Util.java    </p>
</blockquote>
<p>我们在使用的时候的大致步骤是：</p>
<p>1、先得到DiskLruCache这个对象</p>
<p>2、操作这个对象，其中包括存，取，删等操作</p>
<p>3、清理缓存</p>
<p>下面依次介绍一下：</p>
<font color="#f00" size="3">1、先得到DiskLruCache这个对象</font><br>(源自源码）：<br><br>     /<em>*
       </em> Opens the cache in {@code directory}, creating a cache if none exists there.<br>          <em>
          </em> @param directory a writable directory<br>         <em> @param valueCount the number of values per cache entry. Must be positive.
          </em> @param maxSize the maximum number of bytes this cache should use to store<br>          <em> @throws IOException if reading or writing the cache directory fails
         </em>/<br>    public static DiskLruCache open(File directory, int appVersion, int valueCount, long maxSize)<br>      throws IOException {<br>    if (maxSize &lt;= 0) {<br>      throw new IllegalArgumentException(“maxSize &lt;= 0”);<br>    }<br>    if (valueCount &lt;= 0) {<br>      throw new IllegalArgumentException(“valueCount &lt;= 0”);<br>    }<br><br>    // If a bkp file exists, use it instead.<br>    File backupFile = new File(directory, JOURNAL_FILE_BACKUP);<br>    if (backupFile.exists()) {<br>      File journalFile = new File(directory, JOURNAL_FILE);<br>      // If journal file also exists just delete backup file.<br>      if (journalFile.exists()) {<br>        backupFile.delete();<br>      } else {<br>        renameTo(backupFile, journalFile, false);<br>      }<br>    }<br><br>    // Prefer to pick up where we left off.<br>    DiskLruCache cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);<br>    if (cache.journalFile.exists()) {<br>      try {<br>        cache.readJournal();<br>        cache.processJournal();<br>        return cache;<br>      } catch (IOException journalIsCorrupt) {<br>        System.out<br>            .println(“DiskLruCache “<br>                + directory<br>                + “ is corrupt: “<br>                + journalIsCorrupt.getMessage()<br>                + “, removing”);<br>        cache.delete();<br>      }<br>    }<br><br>    // Create a new empty cache.<br>    directory.mkdirs();<br>    cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);<br>    cache.rebuildJournal();<br>    return cache;<br>      }<br>我们可以看到，DiskLruCache需要通过open的方法拿到实例对象（因为DiskLruCache本身已经被单例模式了）<br><br>这个open方法里面大致做了<br><br><font color="#F00">journal文件的创建</font>

<font color="#F00">journal备份文件的创建</font>

<font color="#F00">根据输入文件目录创建出文件夹</font>

<font color="#F00">一些全局变量的初始化操作</font>

<p>我们在用open方法时需要传递的参数是</p>
<p>1.要创建的文件目录名</p>
<p>2.当前我们这个应用的版本号</p>
<p>3.设置一个文件名对应的文件数量，一般传1就可以</p>
<p>4.设置缓存文件的大小</p>
<p>需要注意的是，open的第一个参数，我们一般设置成为本机的缓存目录，现在我们的手机都已经内置内存卡了，不过我们还是可以进行一次判断，从而拿到手机中的cache缓存目录</p>
<p>拿缓存目录的方法是：getExternalCacheDir()或者是getCacheDir()</p>
<p>cache缓存目录结构是“<strong>/sdcard/Android/data/\<application package\="">/cache</application></strong>”<br>当然如果手机比较老，而且没有挂在sd卡的话，<br>只能拿到这样的目录了“<strong>/data/data/\<application package\="">/cache</application></strong>”</p>
<hr>
<font color="#f00" size="3">2、使用DiskLruCache这个对象进行本地缓存文件的存、取、删</font>

<p>我们通过open(目录,app版本号,同名文件数量,缓存控件大小)拿到DiskLruCache之后，下面我们来看一下DiskLruCache的使用方法：</p>
<pre><code>存：edit +commit
取：get
删：remove
清缓存：delete
</code></pre><p>1⃣️ 存</p>
<p>使用方法其实很简单，其中需要注意的是，一般我们在存数据的时候，存的数据名称并不是数据本来的名称</p>
<p>比如说网络加载的图片，我们一般是把这个图片的网址当做名称标记，把图片网址经过md5加密方式进行加密</p>
<p>得到一串16进制数组成的String字符串当做文件的名字。</p>
<p>这里提供一个md5工具类，网上随便一搜都能搜到</p>
<pre><code>    public String 2Md5(String key) {  
    String cacheKey;  
    try {  
        final MessageDigest mDigest = MessageDigest.getInstance(&quot;MD5&quot;);  
        mDigest.update(key.getBytes());  
        cacheKey = bytesToHexString(mDigest.digest());  
    } catch (NoSuchAlgorithmException e) {  
        cacheKey = String.valueOf(key.hashCode());  
    }  
    return cacheKey;  
}  

private String bytesToHexString(byte[] bytes) {  
    StringBuilder sb = new StringBuilder();  
    for (int i = 0; i &lt; bytes.length; i++) {  
        String hex = Integer.toHexString(0xFF &amp; bytes[i]);  
        if (hex.length() == 1) {  
            sb.append(&apos;0&apos;);  
        }  
        sb.append(hex);  
    }  
    return sb.toString();  
}  
</code></pre><p>所以说DiskLruCache的edit方法就是这么设计的：</p>
<pre><code> public Editor edit(String key) throws IOException {
  return edit(key, ANY_SEQUENCE_NUMBER);
}

private synchronized Editor edit(String key, long expectedSequenceNumber) throws         IOException {
  checkNotClosed();
  validateKey(key);
  Entry entry = lruEntries.get(key);
  if (expectedSequenceNumber != ANY_SEQUENCE_NUMBER &amp;&amp; (entry == null
      || entry.sequenceNumber != expectedSequenceNumber)) {
    return null; // Snapshot is stale.
  }
  if (entry == null) {
    entry = new Entry(key);
    lruEntries.put(key, entry);
  } else if (entry.currentEditor != null) {
    return null; // Another edit is in progress.
  }

  Editor editor = new Editor(entry);
  entry.currentEditor = editor;

  // Flush the journal before creating files to prevent file leaks.
  journalWriter.write(DIRTY + &apos; &apos; + key + &apos;\n&apos;);
  journalWriter.flush();
  return editor;
}
</code></pre><p>edit方法调用了内部的同步方法 edit(key,-1) 思路是向以lruEntries为对象名的LinkedHashMap里面存入文件名称和Entry，那么Entry就是以后我们存入的流文件</p>
<hr>
<p>细心的同学应该已经注意到了，edit方法执行完后，就会返回一个Editor对象，因为我们的edit方法只能传入名称，所以往DiskLruCache里面存数据的重任就交给了Editor了</p>
<p>往Editor里面存入数据的方法是：</p>
<pre><code>public OutputStream newOutputStream(int index) throws IOException {
  if (index &lt; 0 || index &gt;= valueCount) {
    throw new IllegalArgumentException(&quot;Expected index &quot; + index + &quot; to &quot;
            + &quot;be greater than 0 and less than the maximum value count &quot;
            + &quot;of &quot; + valueCount);
  }
  synchronized (DiskLruCache.this) {
    if (entry.currentEditor != this) {
      throw new IllegalStateException();
    }
    if (!entry.readable) {
      written[index] = true;
    }
    File dirtyFile = entry.getDirtyFile(index);
    FileOutputStream outputStream;
    try {
      outputStream = new FileOutputStream(dirtyFile);
    } catch (FileNotFoundException e) {
      // Attempt to recreate the cache directory.
      directory.mkdirs();
      try {
        outputStream = new FileOutputStream(dirtyFile);
      } catch (FileNotFoundException e2) {
        // We are unable to recover. Silently eat the writes.
        return NULL_OUTPUT_STREAM;
      }
    }
    return new FaultHidingOutputStream(outputStream);
  }
}
</code></pre><p> 主要思路塑造了一个 “dirtyFile”的输出流，这个“dirtyFile”是一个准备好的“缓存文件”，后缀是.tmp（“作者提供了两个文件，一个是dirtyFile 一个是cleanFile，dirtyFile会被后期清理时及时清理掉，只有经过clean后的dirtyFile才能转化成为cleanFile”）<br> 拿到上方的OutputStream之后，我们把从网络下载下来的流写入即可存入到dirtyFile中去了。</p>
 <font color="#f00">注意：上方仅仅是进行了流的写入到了dirtyFile，然后以后想要用这个文件，需要进行commit,这样才能变成cleanFile,这些操作在调用完flush后，将会存到日志文件journal中去</font>

<p> 2⃣️ 取</p>
<p> 取出本地缓存的就比较简单了，下面是源码：</p>
<pre><code> public synchronized Snapshot get(String key) throws IOException {
checkNotClosed();
validateKey(key);
Entry entry = lruEntries.get(key);
if (entry == null) {
  return null;
}

if (!entry.readable) {
  return null;
}

// Open all streams eagerly to guarantee that we see a single published
// snapshot. If we opened streams lazily then the streams could come
// from different edits.
InputStream[] ins = new InputStream[valueCount];
try {
  for (int i = 0; i &lt; valueCount; i++) {
    ins[i] = new FileInputStream(entry.getCleanFile(i));
  }
} catch (FileNotFoundException e) {
  // A file must have been deleted manually!
  for (int i = 0; i &lt; valueCount; i++) {
    if (ins[i] != null) {
      Util.closeQuietly(ins[i]);
    } else {
      break;
    }
  }
  return null;
}

redundantOpCount++;
journalWriter.append(READ + &apos; &apos; + key + &apos;\n&apos;);
if (journalRebuildRequired()) {
  executorService.submit(cleanupCallable);
}

return new Snapshot(key, entry.sequenceNumber, ins, entry.lengths);
  }
</code></pre><p>  那么里面的操作基本上有这么几点</p>
<p>  1.检查本地缓存是否关闭，确保处于未关闭状态，这是通过journalWriter来判断的(<font color="#f00">文件的存取删都跟日志文件有关系</font>）</p>
<p>  2.检验传入参数“key”的有效性，应为J神在设计的时候对存入的文件名有特殊的规定，必须是1到120个字符以内的，并且取值范围是0-9，a-Z,只能包括下划线和中划线，所以这对文件名做了限定。</p>
<p>  3.下面就直接从LinkedHashMap中读取名称为key的Entry数据了(因为我们存的时候就存到了此linkedHashMap之中)</p>
<p>  4.由于日志文件和读 取 删 文件都是相关的，所以在取文件的时候也要对journal进行记录</p>
<p>  5.比较重要的一步“redundantOpCount++;”这句代码是对journal 中的日志记录进行计数，当达到一定的临界值的时候<br>  journal文件就会被重新创建。代码如下</p>
<pre><code>  /**
 * We only rebuild the journal when it will halve the size of the journal
 * and eliminate at least 2000 ops.
 */
private boolean journalRebuildRequired() {
  final int redundantOpCompactThreshold = 2000;
  return redundantOpCount &gt;= redundantOpCompactThreshold //
      &amp;&amp; redundantOpCount &gt;= lruEntries.size();
}
</code></pre><p>3⃣️ 删</p>
<p>有时候我们需要对特定的文件进行删除，比如我们的splash页面可能会设置成可以变化的图片，这个时候就没有必要对这个图片网址进行缓存了，而我们又不能对某个图片加载框架进行单独的 “不缓存“的设定，所以只能进行这个缓存文件的删除了。</p>
<p>删的操作比取还要简单</p>
<pre><code>/**
  * Drops the entry for {@code key} if it exists and can be removed. Entries
  * actively being edited cannot be removed.
  *
  * @return true if an entry was removed.
  */
 public synchronized boolean remove(String key) throws IOException {
   checkNotClosed();
   validateKey(key);
   Entry entry = lruEntries.get(key);
   if (entry == null || entry.currentEditor != null) {
     return false;
   }

   for (int i = 0; i &lt; valueCount; i++) {
     File file = entry.getCleanFile(i);
     if (file.exists() &amp;&amp; !file.delete()) {
       throw new IOException(&quot;failed to delete &quot; + file);
     }
     size -= entry.lengths[i];
     entry.lengths[i] = 0;
   }

   redundantOpCount++;
   journalWriter.append(REMOVE + &apos; &apos; + key + &apos;\n&apos;);
   lruEntries.remove(key);

   if (journalRebuildRequired()) {
     executorService.submit(cleanupCallable);
   }

   return true;
 }
</code></pre><p> 除了跟取有几个相似点之外，其他的就是对LinkedHashMap进行了remove的操作，并且对日志文件进行了新的添加</p>
<p> 4⃣️ 其他的一些api的使用</p>
<ol>
<li>size()<br>这个方法会返回当前缓存路径下所有缓存数据的总字节数，以byte为单位，如果应用程序中需要在界面上显示当前缓存数据的总大小，就可以通过调用这个方法计算出来。</li>
</ol>
<p>J神的DiskLruCache中存在着size的long类型的变量，变量在linkedhashmap操作的过程中也在不停的加 减控件大小，所以当用户调用的时候，只需要把这个变量返回给用户即可：（<font color="#f00">注意:我们在初始化的时候已经设定了DiskLruCache的大小，所以J神在editer提交全部的时候对size和缓存大小做了比较，如果size较大，那么就会对Journal日志文件进行重置，对缓存文件即LinkedHashMap进行释放（释放规则是下方第二块代码）</font>）</p>
<pre><code>/**
   * Returns the number of bytes currently being used to store the values in
   * this cache. This may be greater than the max size if a background
   * deletion is pending.
   */
  public synchronized long size() {
    return size;
  }
</code></pre><p>–<br>    private void trimToSize() throws IOException {<br>    while (size &gt; maxSize) {<br>      Map.Entry<string, entry=""> toEvict = lruEntries.entrySet().iterator().next();<br>      remove(toEvict.getKey());<br>    }<br>      }<br>  释放规则我们可以看懂：即释放了最先存入的那个文件，每次当缓存内存空间大于设定的空间时，就会释放最先存入的那个文件。</string,></p>
<p>2.flush()<br>这个方法用于将内存中的操作记录同步到日志文件（也就是journal文件）当中。这个方法非常重要，因为DiskLruCache能够正常工作的前提就是要依赖于journal文件中的内容。其实此方法并不是每次写入缓存都要调用一次flush()方法的，频繁地调用并不会带来任何好处，只会额外增加同步journal文件的时间。比较标准的做法就是在Activity的onPause()方法中去调用一次flush()方法就可以了。</p>
<pre><code>/** Force buffered operations to the filesystem. */
  public synchronized void flush() throws IOException {
    checkNotClosed();
    trimToSize();
    journalWriter.flush();
  }
</code></pre><p>3.close()<br>这个方法用于将DiskLruCache关闭掉，是和open()方法对应的一个方法。关闭掉了之后就不能再调用DiskLruCache中任何操作缓存数据的方法，通常只应该在Activity的onDestroy()方法中去调用close()方法。</p>
<font color="red">这个时候用户既不能存也不能取，但是文件还存在本地</font>

<pre><code>/** Closes this cache. Stored values will remain on the filesystem. */
 public synchronized void close() throws IOException {
   if (journalWriter == null) {
     return; // Already closed.
   }
   for (Entry entry : new ArrayList&lt;Entry&gt;(lruEntries.values())) {
     if (entry.currentEditor != null) {
       entry.currentEditor.abort();
     }
   }
   trimToSize();
   journalWriter.close();
   journalWriter = null;
 }
</code></pre><p>4.delete()<br>这个方法用于将所有的缓存数据全部删除，比如说软件中的那个手动清理缓存功能，其实只需要调用一下DiskLruCache的delete()方法就可以实现了。</p>
<pre><code> /**
   * Closes the cache and deletes all of its stored values. This will delete
   * all files in the cache directory including files that weren&apos;t created by
   * the cache.
   */
  public void delete() throws IOException {
    close();
    Util.deleteContents(directory);
  }

-------------------------------------------------------------------------------

      /**
   * Deletes the contents of {@code dir}. Throws an IOException if any file
   * could not be deleted, or if {@code dir} is not a readable directory.
   */
  static void deleteContents(File dir) throws IOException {
    File[] files = dir.listFiles();
    if (files == null) {
      throw new IOException(&quot;not a readable directory: &quot; + dir);
    }
    for (File file : files) {
      if (file.isDirectory()) {
        deleteContents(file);
      }
      if (!file.delete()) {
        throw new IOException(&quot;failed to delete file: &quot; + file);
      }
    }
  }
</code></pre><p>J神的代码大致上就这样，值得注意的是，此类是实现自Closeable这个接口的，这个接口的实际用处不大，但是却强调了本类是一个可以关闭的数据源，调用这个接口的实现方法用于释放这个类中保存的数据源。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oucijhbtq.bkt.clouddn.com/bb.png?imageMogr2/auto-orient/thumbnail/884x/blur/1x0/quality/75|imageslim&quot; alt=&quot;BLACKBERRY&quot; t
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>“代理”</title>
    <link href="http://yoursite.com/2017/08/08/%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2017/08/08/代理/</id>
    <published>2017-08-08T03:38:56.000Z</published>
    <updated>2017-08-09T04:13:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近有准备面试的小伙伴问我JAVA中的代理是什么?</p>
<p>被这么突然被这么一问，感觉有点懵逼啊，于是赶紧对这点知识做个复习，在这做下记录。    </p>
<p>“代理”这个名词我们都很熟悉，最常见的就是“火车票代售点”、“xxx化妆品代理”等等，那么代理的意思就是：我们可以不用真正的“<strong>主体</strong>”，就能够使用到“<strong>主体</strong>”里面的功能，访问到“<strong>主体</strong>”里面的某个属性。</p>
<p>那么总结一句话：“<em>代理是为一个对象提供一个代理者，别人通过这个代理者能够完成对这个对象的访问。</em>”</p>
<p>Java中有两个代理方式，即静态代理和动态代理，但是实际上我们在做android开发的时候并没有刻意的去在意到底使用了哪种代理方式。比如我们在用工厂模式的时候就是在使用了一个简单的静态代理。</p>
<p>ok，我们现在联想一下ActivityManager的工作任务。</p>
<blockquote>
<p>ActivityManager.AppTask<br>  ActivityManager.MemoryInfo<br>  ActivityManager.ProcessErrorStateInfo<br>ActivityManager.RecentTaskInfo<br>ActivityManager.RunningAppProcessInfo<br>ActivityManager.RunningServiceInfo<br>ActivityManager.RunningTaskInfo<br>ActivityManager.TaskDescription</p>
</blockquote>
<p>但是这些工作任务并不是由ActvityManager本身完成的，我们细看源码的话，会发现真正处理这些任务的“<strong>角色</strong>”是        </p>
<font color="#A52A2A" size="4">ActivityManagerNative.getDefault()</font>

<p>然后就会找到ActivityManagerProxy<br>再往下看的话就能够看到AMS了，那么他们之间的关系大致是这样的</p>
<blockquote>
<p>ActivityManagerProxy代理类是ActivityManagerNative的内部类；<br>ActivityManagerNative是个抽象类，真正发挥作用的是它的子类ActivityManagerService（系统Service组件)</p>
</blockquote>
<p>那么实际上ActivityManager的操作流程是，通过ActivityManager去拿到ActivityManagerNative中的一个代理类，就是ActivityManagerProxy,然后这个代理类就会可以通过进程间通信拿到ActivityManagerService，然后再去做真正的任务。</p>
<p>ok，let me show you the code:(简化后的伪代码，这是代码还套了几层）</p>
<pre><code>ActivityManager:

public class ActivityManager{
  doProcessThings(){
  ActivityManagerNative.getDefault().doProcessThings();
    }    
}
</code></pre><p>上面的代码是我们简单模仿ActivityManagerService进行处理，因为AMS在处理某些逻辑的时候，它是放到C语言中去处理的，所以我们拿ActivityManagerService的时候并不是很方便，这个时候我们是通过一个AMS的代理去操作的。</p>
<p>ok，以上是对代理的一小点总结，如果有时间的话，我会再细致的记录一下的。</p>
<p>have a good time~~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有准备面试的小伙伴问我JAVA中的代理是什么?&lt;/p&gt;
&lt;p&gt;被这么突然被这么一问，感觉有点懵逼啊，于是赶紧对这点知识做个复习，在这做下记录。    &lt;/p&gt;
&lt;p&gt;“代理”这个名词我们都很熟悉，最常见的就是“火车票代售点”、“xxx化妆品代理”等等，那么代理的意思就是
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>aboutme</title>
    <link href="http://yoursite.com/2017/08/06/aboutme/"/>
    <id>http://yoursite.com/2017/08/06/aboutme/</id>
    <published>2017-08-06T05:02:47.000Z</published>
    <updated>2017-08-06T05:08:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>photos:</p>
<ul>
<li><a href="http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg" target="_blank" rel="external">http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg</a></li>
<li><a href="http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg" target="_blank" rel="external">http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;photos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bruce.u.q
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/08/06/hello-world/"/>
    <id>http://yoursite.com/2017/08/06/hello-world/</id>
    <published>2017-08-05T16:13:25.000Z</published>
    <updated>2017-08-05T16:13:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
